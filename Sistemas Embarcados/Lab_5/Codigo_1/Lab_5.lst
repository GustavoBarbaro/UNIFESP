;  LST file generated by mikroListExporter - v.2.0 
; Date/Time: 27/01/2022 22:12:18
;----------------------------------------------

;Address Opcode 	ASM
0x0000	0xF000EF29  	GOTO        82
0x0004	0x0000      	NOP
0x0006	0x0000      	NOP
0x0008	0xF000EF00  	GOTO        0
0x000C	0x0000      	NOP
0x000E	0x0000      	NOP
0x0010	0x0000      	NOP
0x0012	0x0000      	NOP
0x0014	0x0000      	NOP
0x0016	0x0000      	NOP
0x0018	0xD7F3      	BRA         0
_Div_16X16_U:
;__Lib_Math.c,102 :: 		
;__Lib_Math.c,109 :: 		
0x001C	0x6A08      	CLRF        R8, 0
;__Lib_Math.c,110 :: 		
0x001E	0x6A09      	CLRF        R9, 0
;__Lib_Math.c,111 :: 		
0x0020	0x0E10      	MOVLW       16
;__Lib_Math.c,112 :: 		
0x0022	0x6E0C      	MOVWF       R12, 0
;__Lib_Math.c,113 :: 		
0x0024	0x3401      	RLCF        R1, 0, 0
;__Lib_Math.c,114 :: 		
0x0026	0x3608      	RLCF        R8, 1, 0
;__Lib_Math.c,115 :: 		
0x0028	0x3609      	RLCF        R9, 1, 0
;__Lib_Math.c,116 :: 		
0x002A	0x5004      	MOVF        R4, 0, 0
;__Lib_Math.c,117 :: 		
0x002C	0x5E08      	SUBWF       R8, 1, 0
;__Lib_Math.c,118 :: 		
0x002E	0x5005      	MOVF        R5, 0, 0
;__Lib_Math.c,119 :: 		
0x0030	0xA0D8      	BTFSS       STATUS, 0, 0
;__Lib_Math.c,120 :: 		
0x0032	0x3C05      	INCFSZ      R5, 0, 0
;__Lib_Math.c,121 :: 		
0x0034	0x5E09      	SUBWF       R9, 1, 0
;__Lib_Math.c,122 :: 		
0x0036	0xB0D8      	BTFSC       STATUS, 0, 0
;__Lib_Math.c,123 :: 		
0x0038	0xD007      	BRA         $+16
;__Lib_Math.c,124 :: 		
0x003A	0x5004      	MOVF        R4, 0, 0
;__Lib_Math.c,125 :: 		
0x003C	0x2608      	ADDWF       R8, 1, 0
;__Lib_Math.c,126 :: 		
0x003E	0x5005      	MOVF        R5, 0, 0
;__Lib_Math.c,127 :: 		
0x0040	0xB0D8      	BTFSC       STATUS, 0, 0
;__Lib_Math.c,128 :: 		
0x0042	0x3C05      	INCFSZ      R5, 0, 0
;__Lib_Math.c,129 :: 		
0x0044	0x2609      	ADDWF       R9, 1, 0
;__Lib_Math.c,130 :: 		
0x0046	0x90D8      	BCF         STATUS, 0, 0
;__Lib_Math.c,131 :: 		
0x0048	0x3600      	RLCF        R0, 1, 0
;__Lib_Math.c,132 :: 		
0x004A	0x3601      	RLCF        R1, 1, 0
;__Lib_Math.c,133 :: 		
0x004C	0x2E0C      	DECFSZ      R12, 1, 0
;__Lib_Math.c,134 :: 		
0x004E	0xD7EA      	BRA         $-42
;__Lib_Math.c,136 :: 		
L_end_Div_16X16_U:
0x0050	0x0012      	RETURN      0
; end of _Div_16X16_U
_main:
;Lab_5.c,1 :: 		void main() {
;Lab_5.c,8 :: 		unsigned char ucMask[] = {0x3F,0x06,0x5B,0x4F,0x66,0x6D,0x7D,0x07,0x7F,0x6F};
0x0052	0x0E3F      	MOVLW       63
0x0054	0x6E24      	MOVWF       main_ucMask_L0 
0x0056	0x0E06      	MOVLW       6
0x0058	0x6E25      	MOVWF       main_ucMask_L0+1 
0x005A	0x0E5B      	MOVLW       91
0x005C	0x6E26      	MOVWF       main_ucMask_L0+2 
0x005E	0x0E4F      	MOVLW       79
0x0060	0x6E27      	MOVWF       main_ucMask_L0+3 
0x0062	0x0E66      	MOVLW       102
0x0064	0x6E28      	MOVWF       main_ucMask_L0+4 
0x0066	0x0E6D      	MOVLW       109
0x0068	0x6E29      	MOVWF       main_ucMask_L0+5 
0x006A	0x0E7D      	MOVLW       125
0x006C	0x6E2A      	MOVWF       main_ucMask_L0+6 
0x006E	0x0E07      	MOVLW       7
0x0070	0x6E2B      	MOVWF       main_ucMask_L0+7 
0x0072	0x0E7F      	MOVLW       127
0x0074	0x6E2C      	MOVWF       main_ucMask_L0+8 
0x0076	0x0E6F      	MOVLW       111
0x0078	0x6E2D      	MOVWF       main_ucMask_L0+9 
;Lab_5.c,22 :: 		ADCON1 = 0x0f;       // Configura todos canais como Digital.
0x007A	0x0E0F      	MOVLW       15
0x007C	0x6EC1      	MOVWF       ADCON1 
;Lab_5.c,25 :: 		TRISB.RB0=1;         // Define o pino RB0 do PORTB como entrada.
0x007E	0x8093      	BSF         TRISB, 0 
;Lab_5.c,26 :: 		TRISB.RB1=1;         // Define o pino RB1 Do PORTB como entrada.
0x0080	0x8293      	BSF         TRISB, 1 
;Lab_5.c,27 :: 		TRISB.RB2=1;         // Define o pino RB2 Do PORTB como entrada.
0x0082	0x8493      	BSF         TRISB, 2 
;Lab_5.c,29 :: 		TRISA.RA2=0;         // Define o pino RA2 do PORTA como saida(Sele??o Display 1).
0x0084	0x9492      	BCF         TRISA, 2 
;Lab_5.c,30 :: 		TRISA.RA3=0;         // Define o pino RA3 do PORTA como saida(Sele??o Display 2).
0x0086	0x9692      	BCF         TRISA, 3 
;Lab_5.c,31 :: 		TRISA.RA4=0;         // Define o pino RA4 do PORTA como saida(Sele??o Display 3).
0x0088	0x9892      	BCF         TRISA, 4 
;Lab_5.c,32 :: 		TRISA.RA5=0;         // Define o pino RA5 do PORTA como saida(Sele??o Display 4).
0x008A	0x9A92      	BCF         TRISA, 5 
;Lab_5.c,35 :: 		TRISB.RB5=0;         // Define o pino RB5 do PORTA como saida (LED)
0x008C	0x9A93      	BCF         TRISB, 5 
;Lab_5.c,36 :: 		TRISB.RB6=0;         // Define o pino RB6 do PORTA como saida (LED)
0x008E	0x9C93      	BCF         TRISB, 6 
;Lab_5.c,37 :: 		TRISB.RB7=0;         // Define o pino RB7 do PORTA como saida (LED)
0x0090	0x9E93      	BCF         TRISB, 7 
;Lab_5.c,39 :: 		TRISC.RC1=0;      //PORT C configurado como saída (BUZZER)
0x0092	0x9294      	BCF         TRISC, 1 
;Lab_5.c,41 :: 		TRISD = 0;           // Define todos os pinos Do PORTD como saida.
0x0094	0x6A95      	CLRF        TRISD 
;Lab_5.c,44 :: 		cont_RB0 = 0;		//contadores inicializados zerados
0x0096	0x6A15      	CLRF        main_cont_RB0_L0 
0x0098	0x6A16      	CLRF        main_cont_RB0_L0+1 
;Lab_5.c,45 :: 		cont_RB1 = 0;
0x009A	0x6A17      	CLRF        main_cont_RB1_L0 
0x009C	0x6A18      	CLRF        main_cont_RB1_L0+1 
;Lab_5.c,46 :: 		cont_TOTAL = 0;
0x009E	0x6A19      	CLRF        main_cont_TOTAL_L0 
0x00A0	0x6A1A      	CLRF        main_cont_TOTAL_L0+1 
;Lab_5.c,48 :: 		flag_buzzer_led = 0;
0x00A2	0x6A1B      	CLRF        main_flag_buzzer_led_L0 
0x00A4	0x6A1C      	CLRF        main_flag_buzzer_led_L0+1 
;Lab_5.c,51 :: 		while (1) {
L_main0:
;Lab_5.c,58 :: 		if((PORTB.RB0==0)&&(trava_RB0==0)){   // Incrementa somente uma vez quando a tecla for pressionada.
0x00A6	0xB081      	BTFSC       PORTB, 0 
0x00A8	0xD011      	BRA         L_main4
0x00AA	0x501D      	MOVF        main_trava_RB0_L0, 0 
0x00AC	0x0A00      	XORLW       0
0x00AE	0xE10E      	BNZ         L_main4
L__main37:
;Lab_5.c,59 :: 		trava_RB0=1;                       // Variavel de travamento do incremento.
0x00B0	0x0E01      	MOVLW       1
0x00B2	0x6E1D      	MOVWF       main_trava_RB0_L0 
;Lab_5.c,60 :: 		cont_RB0++;                         // Esse operador aritmetico(++) realiza o mesmo que variavel = variavel + 1.
0x00B4	0x4A15      	INFSNZ      main_cont_RB0_L0, 1 
0x00B6	0x2A16      	INCF        main_cont_RB0_L0+1, 1 
;Lab_5.c,61 :: 		if(cont_RB0>9999){ // Define o valor maximo a ser mostrado no displays como 9999.
0x00B8	0x5016      	MOVF        main_cont_RB0_L0+1, 0 
0x00BA	0x0827      	SUBLW       39
0x00BC	0xE102      	BNZ         L__main39
0x00BE	0x5015      	MOVF        main_cont_RB0_L0, 0 
0x00C0	0x080F      	SUBLW       15
L__main39:
0x00C2	0xE204      	BC          L_main5
;Lab_5.c,62 :: 		cont_RB0=9999;
0x00C4	0x0E0F      	MOVLW       15
0x00C6	0x6E15      	MOVWF       main_cont_RB0_L0 
0x00C8	0x0E27      	MOVLW       39
0x00CA	0x6E16      	MOVWF       main_cont_RB0_L0+1 
;Lab_5.c,63 :: 		}
L_main5:
;Lab_5.c,64 :: 		}
L_main4:
;Lab_5.c,65 :: 		if((PORTB.RB0==1)&&(trava_RB0==1)){   // Volta a disponibilizar a op??o de incremento quando a tecla for solta.
0x00CC	0xA081      	BTFSS       PORTB, 0 
0x00CE	0xD004      	BRA         L_main8
0x00D0	0x501D      	MOVF        main_trava_RB0_L0, 0 
0x00D2	0x0A01      	XORLW       1
0x00D4	0xB4D8      	BTFSC       STATUS, 2 
L__main36:
;Lab_5.c,66 :: 		trava_RB0=0;
0x00D6	0x6A1D      	CLRF        main_trava_RB0_L0 
;Lab_5.c,67 :: 		}
L_main8:
;Lab_5.c,69 :: 		aux_cont1 = cont_RB0;
0x00D8	0xF020C015  	MOVFF       main_cont_RB0_L0, main_aux_cont1_L0
0x00DC	0xF021C016  	MOVFF       main_cont_RB0_L0+1, main_aux_cont1_L0+1
;Lab_5.c,72 :: 		if((PORTB.RB1==0)&&(trava_RB1==0)){   // Incrementa somente uma vez quando a tecla for pressionada.
0x00E0	0xB281      	BTFSC       PORTB, 1 
0x00E2	0xD011      	BRA         L_main11
0x00E4	0x501E      	MOVF        main_trava_RB1_L0, 0 
0x00E6	0x0A00      	XORLW       0
0x00E8	0xE10E      	BNZ         L_main11
L__main35:
;Lab_5.c,73 :: 		trava_RB1=1;                       // Variavel de travamento do incremento.
0x00EA	0x0E01      	MOVLW       1
0x00EC	0x6E1E      	MOVWF       main_trava_RB1_L0 
;Lab_5.c,74 :: 		cont_RB1++;                         // Esse operador aritmetico(++) realiza o mesmo que variavel = variavel + 1.
0x00EE	0x4A17      	INFSNZ      main_cont_RB1_L0, 1 
0x00F0	0x2A18      	INCF        main_cont_RB1_L0+1, 1 
;Lab_5.c,75 :: 		if(cont_RB1>9999){ // Define o valor maximo a ser mostrado no displays como 9999.
0x00F2	0x5018      	MOVF        main_cont_RB1_L0+1, 0 
0x00F4	0x0827      	SUBLW       39
0x00F6	0xE102      	BNZ         L__main40
0x00F8	0x5017      	MOVF        main_cont_RB1_L0, 0 
0x00FA	0x080F      	SUBLW       15
L__main40:
0x00FC	0xE204      	BC          L_main12
;Lab_5.c,76 :: 		cont_RB1=9999;
0x00FE	0x0E0F      	MOVLW       15
0x0100	0x6E17      	MOVWF       main_cont_RB1_L0 
0x0102	0x0E27      	MOVLW       39
0x0104	0x6E18      	MOVWF       main_cont_RB1_L0+1 
;Lab_5.c,77 :: 		}
L_main12:
;Lab_5.c,78 :: 		}
L_main11:
;Lab_5.c,79 :: 		if((PORTB.RB1==1)&&(trava_RB1==1)){   // Volta a disponibilizar a op??o de incremento quando a tecla for solta.
0x0106	0xA281      	BTFSS       PORTB, 1 
0x0108	0xD004      	BRA         L_main15
0x010A	0x501E      	MOVF        main_trava_RB1_L0, 0 
0x010C	0x0A01      	XORLW       1
0x010E	0xB4D8      	BTFSC       STATUS, 2 
L__main34:
;Lab_5.c,80 :: 		trava_RB1=0;
0x0110	0x6A1E      	CLRF        main_trava_RB1_L0 
;Lab_5.c,81 :: 		}
L_main15:
;Lab_5.c,83 :: 		aux_cont2 = cont_RB1;
0x0112	0xF022C017  	MOVFF       main_cont_RB1_L0, main_aux_cont2_L0
0x0116	0xF023C018  	MOVFF       main_cont_RB1_L0+1, main_aux_cont2_L0+1
;Lab_5.c,86 :: 		if((PORTB.RB2==0)&&(trava_RB2==0)){   // Incrementa somente uma vez quando a tecla for pressionada.
0x011A	0xB481      	BTFSC       PORTB, 2 
0x011C	0xD00D      	BRA         L_main18
0x011E	0x501F      	MOVF        main_trava_RB2_L0, 0 
0x0120	0x0A00      	XORLW       0
0x0122	0xE10A      	BNZ         L_main18
L__main33:
;Lab_5.c,87 :: 		trava_RB2=1;                       // Variavel de travamento do incremento.
0x0124	0x0E01      	MOVLW       1
0x0126	0x6E1F      	MOVWF       main_trava_RB2_L0 
;Lab_5.c,88 :: 		cont_RB0 = 0;					//zerando os contadores
0x0128	0x6A15      	CLRF        main_cont_RB0_L0 
0x012A	0x6A16      	CLRF        main_cont_RB0_L0+1 
;Lab_5.c,89 :: 		cont_RB1 = 0;
0x012C	0x6A17      	CLRF        main_cont_RB1_L0 
0x012E	0x6A18      	CLRF        main_cont_RB1_L0+1 
;Lab_5.c,90 :: 		flag_buzzer_led = 1;
0x0130	0x0E01      	MOVLW       1
0x0132	0x6E1B      	MOVWF       main_flag_buzzer_led_L0 
0x0134	0x0E00      	MOVLW       0
0x0136	0x6E1C      	MOVWF       main_flag_buzzer_led_L0+1 
;Lab_5.c,91 :: 		}
L_main18:
;Lab_5.c,92 :: 		if((PORTB.RB2==1)&&(trava_RB2==1)){   // Volta a disponibilizar a op??o de incremento quando a tecla for solta.
0x0138	0xA481      	BTFSS       PORTB, 2 
0x013A	0xD004      	BRA         L_main21
0x013C	0x501F      	MOVF        main_trava_RB2_L0, 0 
0x013E	0x0A01      	XORLW       1
0x0140	0xB4D8      	BTFSC       STATUS, 2 
L__main32:
;Lab_5.c,93 :: 		trava_RB2=0;
0x0142	0x6A1F      	CLRF        main_trava_RB2_L0 
;Lab_5.c,94 :: 		}
L_main21:
;Lab_5.c,102 :: 		if ((aux_cont1 % 2) == 0){
0x0144	0x0E01      	MOVLW       1
0x0146	0x1420      	ANDWF       main_aux_cont1_L0, 0 
0x0148	0x6E01      	MOVWF       R1 
0x014A	0xF002C021  	MOVFF       main_aux_cont1_L0+1, R2
0x014E	0x0E00      	MOVLW       0
0x0150	0x1602      	ANDWF       R2, 1 
0x0152	0x0E00      	MOVLW       0
0x0154	0x1802      	XORWF       R2, 0 
0x0156	0xE102      	BNZ         L__main41
0x0158	0x0E00      	MOVLW       0
0x015A	0x1801      	XORWF       R1, 0 
L__main41:
0x015C	0xE102      	BNZ         L_main22
;Lab_5.c,103 :: 		PORTB.RB6 = 1;
0x015E	0x8C81      	BSF         PORTB, 6 
;Lab_5.c,104 :: 		}
0x0160	0xD001      	BRA         L_main23
L_main22:
;Lab_5.c,106 :: 		PORTB.RB6 = 0;
0x0162	0x9C81      	BCF         PORTB, 6 
;Lab_5.c,107 :: 		}
L_main23:
;Lab_5.c,110 :: 		if ((aux_cont2 % 2) == 1){
0x0164	0x0E01      	MOVLW       1
0x0166	0x1422      	ANDWF       main_aux_cont2_L0, 0 
0x0168	0x6E01      	MOVWF       R1 
0x016A	0xF002C023  	MOVFF       main_aux_cont2_L0+1, R2
0x016E	0x0E00      	MOVLW       0
0x0170	0x1602      	ANDWF       R2, 1 
0x0172	0x0E00      	MOVLW       0
0x0174	0x1802      	XORWF       R2, 0 
0x0176	0xE102      	BNZ         L__main42
0x0178	0x0E01      	MOVLW       1
0x017A	0x1801      	XORWF       R1, 0 
L__main42:
0x017C	0xE102      	BNZ         L_main24
;Lab_5.c,111 :: 		PORTB.RB7 = 1;
0x017E	0x8E81      	BSF         PORTB, 7 
;Lab_5.c,112 :: 		}
0x0180	0xD001      	BRA         L_main25
L_main24:
;Lab_5.c,114 :: 		PORTB.RB7 = 0;
0x0182	0x9E81      	BCF         PORTB, 7 
;Lab_5.c,115 :: 		}
L_main25:
;Lab_5.c,118 :: 		if (flag_buzzer_led == 1){
0x0184	0x0E00      	MOVLW       0
0x0186	0x181C      	XORWF       main_flag_buzzer_led_L0+1, 0 
0x0188	0xE102      	BNZ         L__main43
0x018A	0x0E01      	MOVLW       1
0x018C	0x181B      	XORWF       main_flag_buzzer_led_L0, 0 
L__main43:
0x018E	0xE113      	BNZ         L_main26
;Lab_5.c,120 :: 		PORTB.RB5 = 1;				//liga led
0x0190	0x8A81      	BSF         PORTB, 5 
;Lab_5.c,121 :: 		PORTC.RC1 = 1;   //LIGA BUZZER
0x0192	0x8282      	BSF         PORTC, 1 
;Lab_5.c,123 :: 		delay_ms(100);
0x0194	0x0E02      	MOVLW       2
0x0196	0x6E0B      	MOVWF       R11, 0
0x0198	0x0E04      	MOVLW       4
0x019A	0x6E0C      	MOVWF       R12, 0
0x019C	0x0EBA      	MOVLW       186
0x019E	0x6E0D      	MOVWF       R13, 0
L_main27:
0x01A0	0x2E0D      	DECFSZ      R13, 1, 0
0x01A2	0xD7FE      	BRA         L_main27
0x01A4	0x2E0C      	DECFSZ      R12, 1, 0
0x01A6	0xD7FC      	BRA         L_main27
0x01A8	0x2E0B      	DECFSZ      R11, 1, 0
0x01AA	0xD7FA      	BRA         L_main27
0x01AC	0x0000      	NOP
;Lab_5.c,125 :: 		PORTB.RB5 = 0;				//desliga led
0x01AE	0x9A81      	BCF         PORTB, 5 
;Lab_5.c,126 :: 		PORTC.RC1 = 0;   			//desliga BUZZER
0x01B0	0x9282      	BCF         PORTC, 1 
;Lab_5.c,127 :: 		flag_buzzer_led = 0;
0x01B2	0x6A1B      	CLRF        main_flag_buzzer_led_L0 
0x01B4	0x6A1C      	CLRF        main_flag_buzzer_led_L0+1 
;Lab_5.c,128 :: 		}
L_main26:
;Lab_5.c,132 :: 		cont_TOTAL = aux_cont1 + aux_cont2;
0x01B6	0x5022      	MOVF        main_aux_cont2_L0, 0 
0x01B8	0x2420      	ADDWF       main_aux_cont1_L0, 0 
0x01BA	0x6E00      	MOVWF       R0 
0x01BC	0x5023      	MOVF        main_aux_cont2_L0+1, 0 
0x01BE	0x2021      	ADDWFC      main_aux_cont1_L0+1, 0 
0x01C0	0x6E01      	MOVWF       R1 
0x01C2	0xF019C000  	MOVFF       R0, main_cont_TOTAL_L0
0x01C6	0xF01AC001  	MOVFF       R1, main_cont_TOTAL_L0+1
;Lab_5.c,136 :: 		PORTD = ucMask[cont_TOTAL%10];              // Pega modulo da divisao por 10 e coloca o valor no PORTD.
0x01CA	0x0E0A      	MOVLW       10
0x01CC	0x6E04      	MOVWF       R4 
0x01CE	0x0E00      	MOVLW       0
0x01D0	0x6E05      	MOVWF       R5 
0x01D2	0xDF24      	RCALL       _Div_16X16_U
0x01D4	0xF000C008  	MOVFF       R8, R0
0x01D8	0xF001C009  	MOVFF       R9, R1
0x01DC	0x0E24      	MOVLW       main_ucMask_L0
0x01DE	0x2400      	ADDWF       R0, 0 
0x01E0	0x6EE9      	MOVWF       FSR0L 
0x01E2	0x0E00      	MOVLW       hi_addr(main_ucMask_L0)
0x01E4	0x2001      	ADDWFC      R1, 0 
0x01E6	0x6EEA      	MOVWF       FSR0L+1 
0x01E8	0xFF83CFEE  	MOVFF       POSTINC0, PORTD
;Lab_5.c,137 :: 		PORTA.RA5 = 1;                           // Liga o transistor associado ao display 1.
0x01EC	0x8A80      	BSF         PORTA, 5 
;Lab_5.c,138 :: 		Delay_ms(2);                             // Delay para escrita no display.
0x01EE	0x0E06      	MOVLW       6
0x01F0	0x6E0C      	MOVWF       R12, 0
0x01F2	0x0E30      	MOVLW       48
0x01F4	0x6E0D      	MOVWF       R13, 0
L_main28:
0x01F6	0x2E0D      	DECFSZ      R13, 1, 0
0x01F8	0xD7FE      	BRA         L_main28
0x01FA	0x2E0C      	DECFSZ      R12, 1, 0
0x01FC	0xD7FC      	BRA         L_main28
0x01FE	0x0000      	NOP
;Lab_5.c,139 :: 		PORTA.RA5 = 0;                           // Desliga o transistor associado ao display 1.
0x0200	0x9A80      	BCF         PORTA, 5 
;Lab_5.c,140 :: 		cont_TOTAL/=10;                             // Divide variavel por 10 para definir a dezena.
0x0202	0x0E0A      	MOVLW       10
0x0204	0x6E04      	MOVWF       R4 
0x0206	0x0E00      	MOVLW       0
0x0208	0x6E05      	MOVWF       R5 
0x020A	0xF000C019  	MOVFF       main_cont_TOTAL_L0, R0
0x020E	0xF001C01A  	MOVFF       main_cont_TOTAL_L0+1, R1
0x0212	0xDF04      	RCALL       _Div_16X16_U
0x0214	0xF019C000  	MOVFF       R0, main_cont_TOTAL_L0
0x0218	0xF01AC001  	MOVFF       R1, main_cont_TOTAL_L0+1
;Lab_5.c,142 :: 		PORTD = ucMask[cont_TOTAL%10];
0x021C	0x0E0A      	MOVLW       10
0x021E	0x6E04      	MOVWF       R4 
0x0220	0x0E00      	MOVLW       0
0x0222	0x6E05      	MOVWF       R5 
0x0224	0xDEFB      	RCALL       _Div_16X16_U
0x0226	0xF000C008  	MOVFF       R8, R0
0x022A	0xF001C009  	MOVFF       R9, R1
0x022E	0x0E24      	MOVLW       main_ucMask_L0
0x0230	0x2400      	ADDWF       R0, 0 
0x0232	0x6EE9      	MOVWF       FSR0L 
0x0234	0x0E00      	MOVLW       hi_addr(main_ucMask_L0)
0x0236	0x2001      	ADDWFC      R1, 0 
0x0238	0x6EEA      	MOVWF       FSR0L+1 
0x023A	0xFF83CFEE  	MOVFF       POSTINC0, PORTD
;Lab_5.c,143 :: 		PORTA.RA4 = 1;
0x023E	0x8880      	BSF         PORTA, 4 
;Lab_5.c,144 :: 		Delay_ms(2);
0x0240	0x0E06      	MOVLW       6
0x0242	0x6E0C      	MOVWF       R12, 0
0x0244	0x0E30      	MOVLW       48
0x0246	0x6E0D      	MOVWF       R13, 0
L_main29:
0x0248	0x2E0D      	DECFSZ      R13, 1, 0
0x024A	0xD7FE      	BRA         L_main29
0x024C	0x2E0C      	DECFSZ      R12, 1, 0
0x024E	0xD7FC      	BRA         L_main29
0x0250	0x0000      	NOP
;Lab_5.c,145 :: 		PORTA.RA4 = 0;
0x0252	0x9880      	BCF         PORTA, 4 
;Lab_5.c,146 :: 		cont_TOTAL/=10;
0x0254	0x0E0A      	MOVLW       10
0x0256	0x6E04      	MOVWF       R4 
0x0258	0x0E00      	MOVLW       0
0x025A	0x6E05      	MOVWF       R5 
0x025C	0xF000C019  	MOVFF       main_cont_TOTAL_L0, R0
0x0260	0xF001C01A  	MOVFF       main_cont_TOTAL_L0+1, R1
0x0264	0xDEDB      	RCALL       _Div_16X16_U
0x0266	0xF019C000  	MOVFF       R0, main_cont_TOTAL_L0
0x026A	0xF01AC001  	MOVFF       R1, main_cont_TOTAL_L0+1
;Lab_5.c,148 :: 		PORTD = ucMask[cont_TOTAL%10];
0x026E	0x0E0A      	MOVLW       10
0x0270	0x6E04      	MOVWF       R4 
0x0272	0x0E00      	MOVLW       0
0x0274	0x6E05      	MOVWF       R5 
0x0276	0xDED2      	RCALL       _Div_16X16_U
0x0278	0xF000C008  	MOVFF       R8, R0
0x027C	0xF001C009  	MOVFF       R9, R1
0x0280	0x0E24      	MOVLW       main_ucMask_L0
0x0282	0x2400      	ADDWF       R0, 0 
0x0284	0x6EE9      	MOVWF       FSR0L 
0x0286	0x0E00      	MOVLW       hi_addr(main_ucMask_L0)
0x0288	0x2001      	ADDWFC      R1, 0 
0x028A	0x6EEA      	MOVWF       FSR0L+1 
0x028C	0xFF83CFEE  	MOVFF       POSTINC0, PORTD
;Lab_5.c,149 :: 		PORTA.RA3 = 1;
0x0290	0x8680      	BSF         PORTA, 3 
;Lab_5.c,150 :: 		Delay_ms(2);
0x0292	0x0E06      	MOVLW       6
0x0294	0x6E0C      	MOVWF       R12, 0
0x0296	0x0E30      	MOVLW       48
0x0298	0x6E0D      	MOVWF       R13, 0
L_main30:
0x029A	0x2E0D      	DECFSZ      R13, 1, 0
0x029C	0xD7FE      	BRA         L_main30
0x029E	0x2E0C      	DECFSZ      R12, 1, 0
0x02A0	0xD7FC      	BRA         L_main30
0x02A2	0x0000      	NOP
;Lab_5.c,151 :: 		PORTA.RA3 = 0;
0x02A4	0x9680      	BCF         PORTA, 3 
;Lab_5.c,152 :: 		cont_TOTAL/=10;
0x02A6	0x0E0A      	MOVLW       10
0x02A8	0x6E04      	MOVWF       R4 
0x02AA	0x0E00      	MOVLW       0
0x02AC	0x6E05      	MOVWF       R5 
0x02AE	0xF000C019  	MOVFF       main_cont_TOTAL_L0, R0
0x02B2	0xF001C01A  	MOVFF       main_cont_TOTAL_L0+1, R1
0x02B6	0xDEB2      	RCALL       _Div_16X16_U
0x02B8	0xF019C000  	MOVFF       R0, main_cont_TOTAL_L0
0x02BC	0xF01AC001  	MOVFF       R1, main_cont_TOTAL_L0+1
;Lab_5.c,154 :: 		PORTD = ucMask[cont_TOTAL%10];
0x02C0	0x0E0A      	MOVLW       10
0x02C2	0x6E04      	MOVWF       R4 
0x02C4	0x0E00      	MOVLW       0
0x02C6	0x6E05      	MOVWF       R5 
0x02C8	0xDEA9      	RCALL       _Div_16X16_U
0x02CA	0xF000C008  	MOVFF       R8, R0
0x02CE	0xF001C009  	MOVFF       R9, R1
0x02D2	0x0E24      	MOVLW       main_ucMask_L0
0x02D4	0x2400      	ADDWF       R0, 0 
0x02D6	0x6EE9      	MOVWF       FSR0L 
0x02D8	0x0E00      	MOVLW       hi_addr(main_ucMask_L0)
0x02DA	0x2001      	ADDWFC      R1, 0 
0x02DC	0x6EEA      	MOVWF       FSR0L+1 
0x02DE	0xFF83CFEE  	MOVFF       POSTINC0, PORTD
;Lab_5.c,155 :: 		PORTA.RA2 = 1;
0x02E2	0x8480      	BSF         PORTA, 2 
;Lab_5.c,156 :: 		Delay_ms(2);
0x02E4	0x0E06      	MOVLW       6
0x02E6	0x6E0C      	MOVWF       R12, 0
0x02E8	0x0E30      	MOVLW       48
0x02EA	0x6E0D      	MOVWF       R13, 0
L_main31:
0x02EC	0x2E0D      	DECFSZ      R13, 1, 0
0x02EE	0xD7FE      	BRA         L_main31
0x02F0	0x2E0C      	DECFSZ      R12, 1, 0
0x02F2	0xD7FC      	BRA         L_main31
0x02F4	0x0000      	NOP
;Lab_5.c,157 :: 		PORTA.RA2 = 0;
0x02F6	0x9480      	BCF         PORTA, 2 
;Lab_5.c,161 :: 		}
0x02F8	0xD6D6      	BRA         L_main0
;Lab_5.c,162 :: 		}
L_end_main:
0x02FA	0xD7FF      	BRA         $+0
; end of _main
Symbol List:
//** Routines locations **
//ADDRESS    SIZE    PROCEDURE
//----------------------------------------------
0x001C      [54]    _Div_16X16_U
0x0052     [682]    _main
//** Variables locations ** 
//ADDRESS    SIZE    VARIABLE
//----------------------------------------------
0x0000       [1]    R0
0x0001       [1]    R1
0x0002       [1]    R2
0x0003       [1]    R3
0x0004       [1]    R4
0x0005       [1]    R5
0x0006       [1]    R6
0x0007       [1]    R7
0x0008       [1]    R8
0x0009       [1]    R9
0x000A       [1]    R10
0x000B       [1]    R11
0x000C       [1]    R12
0x000D       [1]    R13
0x000E       [1]    R14
0x000F       [1]    R15
0x0010       [1]    R16
0x0011       [1]    R17
0x0012       [1]    R18
0x0013       [1]    R19
0x0014       [1]    R20
0x0015       [2]    main_cont_RB0_L0
0x0017       [2]    main_cont_RB1_L0
0x0019       [2]    main_cont_TOTAL_L0
0x001B       [2]    main_flag_buzzer_led_L0
0x001D       [1]    main_trava_RB0_L0
0x001E       [1]    main_trava_RB1_L0
0x001F       [1]    main_trava_RB2_L0
0x0020       [2]    main_aux_cont1_L0
0x0022       [2]    main_aux_cont2_L0
0x0024      [10]    main_ucMask_L0
0x0F80       [1]    PORTA
0x0F81       [1]    PORTB
0x0F82       [1]    PORTC
0x0F83       [1]    PORTD
0x0F92       [1]    TRISA
0x0F93       [1]    TRISB
0x0F94       [1]    TRISC
0x0F95       [1]    TRISD
0x0FC1       [1]    ADCON1
0x0FD8       [1]    STATUS
0x0FD9       [1]    FSR2L
0x0FDA       [1]    FSR2H
0x0FDE       [1]    POSTINC2
0x0FE0       [1]    BSR
0x0FE1       [1]    FSR1L
0x0FE2       [1]    FSR1H
0x0FE4       [1]    PREINC1
0x0FE6       [1]    POSTINC1
0x0FE7       [1]    INDF1
0x0FE8       [1]    WREG
0x0FE9       [1]    FSR0L
0x0FEA       [1]    FSR0H
0x0FEE       [1]    POSTINC0
0x0FF3       [1]    PRODL
0x0FF4       [1]    PRODH
0x0FF5       [1]    TABLAT
0x0FF6       [1]    TBLPTRL
0x0FF7       [1]    TBLPTRH
0x0FF8       [1]    TBLPTRU
